daml 1.2
module Reciprocate where

import Daml.Trigger
import DA.List qualified as List
import DA.Next.Map qualified as Map

import User

trigger = runTrigger $ Trigger
  { initialize = \_acs -> ()
  , updateState = \_acs _message () -> ()
  , rule
  }
  where
    rule : Party -> ACS -> Map.Map CommandId [Command] -> () -> TriggerA ()
    rule party acs commandsInFlight () = do
      let users = getTemplates @User acs
      case List.find (\(_, user) -> user.party == party) users of
        None -> pure ()
        Some (myUserId, myUser) -> do
          let shouldBefriend user =
                party `elem` user.friends && user.party `notElem` myUser.friends
          case List.filter (shouldBefriend . snd) users of
            [] -> pure ()
            (_, userToBefriend) :: _ -> do
              emitCommands [exerciseCmd @User myUserId (AddFriend userToBefriend.party)]
              pure ()
